name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout mã nguồn
      - name: Checkout code
        uses: actions/checkout@v3

      # Cài đặt Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Cài đặt dependencies
      - name: Install dependencies
        run: |
          cd src/frontend
          npm install

      # Tạo file .env chung
      - name: Create .env
        run: |
          echo "DB_USER=username" >> src/.env
          echo "DB_PASSWORD=password" >> src/.env
          echo "DB_NAME=db" >> src/.env
          echo "DB_PORT=5432" >> src/.env
          echo "FE_PORT=3000" >> src/.env
          echo "BE_PORT=3123" >> src/.env

      # Tạo file .env cho frontend
      - name: Create Frontend .env
        run: |
          # Kiểm tra và ghi JWT_SECRET
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "JWT_SECRET không có giá trị, sử dụng giá trị mặc định"
            echo "JWT_SECRET=default_jwt_secret" > ./src/frontend/.env
          else
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > ./src/frontend/.env
          fi
      
          # Kiểm tra và ghi SIGN_UP_SECRET
          if [ -z "${{ secrets.SIGN_UP_SECRET }}" ]; then
            echo "SIGN_UP_SECRET không có giá trị, sử dụng giá trị mặc định"
            echo "SIGN_UP_SECRET=default_sign_up_secret" >> ./src/frontend/.env
          else
            echo "SIGN_UP_SECRET=${{ secrets.SIGN_UP_SECRET }}" >> ./src/frontend/.env
          fi
      
          # Kiểm tra và ghi NEXT_PUBLIC_API_URL
          if [ -z "${{ secrets.NEXT_PUBLIC_API_URL }}" ]; then
            echo "NEXT_PUBLIC_API_URL không có giá trị, sử dụng giá trị mặc định"
            echo "NEXT_PUBLIC_API_URL=http://localhost:3000/api" >> ./src/frontend/.env
          else
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> ./src/frontend/.env
          fi
      
          # Kiểm tra và ghi API_DESTINATION
          if [ -z "${{ secrets.API_DESTINATION }}" ]; then
            echo "API_DESTINATION không có giá trị, sử dụng giá trị mặc định"
            echo "API_DESTINATION=http://localhost:3123" >> ./src/frontend/.env
          else
            echo "API_DESTINATION=${{ secrets.API_DESTINATION }}" >> ./src/frontend/.env
          fi
      
          # Kiểm tra và ghi CYPRESS_BASE_URL
          if [ -z "${{ secrets.CYPRESS_BASE_URL }}" ]; then
            echo "CYPRESS_BASE_URL không có giá trị, sử dụng giá trị mặc định"
            echo "CYPRESS_BASE_URL=http://localhost:3000" >> ./src/frontend/.env
          else
            echo "CYPRESS_BASE_URL=${{ secrets.CYPRESS_BASE_URL }}" >> ./src/frontend/.env
          fi

      # Tạo file .env cho backend
      - name: Create Backend .env
        run: |
          # Kiểm tra và ghi JWT_SECRET
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "JWT_SECRET không có giá trị, sử dụng giá trị mặc định"
            echo "JWT_SECRET=default_jwt_secret" > ./src/backend/.env
          else
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > ./src/backend/.env
          fi
      
          # Kiểm tra và ghi SIGN_UP_SECRET
          if [ -z "${{ secrets.SIGN_UP_SECRET }}" ]; then
            echo "SIGN_UP_SECRET không có giá trị, sử dụng giá trị mặc định"
            echo "SIGN_UP_SECRET=default_sign_up_secret" >> ./src/backend/.env
          else
            echo "SIGN_UP_SECRET=${{ secrets.SIGN_UP_SECRET }}" >> ./src/backend/.env
          fi
      
          # Ghi DATABASE_URL với giá trị mặc định nếu không có
          echo "DATABASE_URL=postgresql://username:password@db:5432/db" >> ./src/backend/.env
      
          # Kiểm tra và ghi CLOUDINARY_API_KEY
          if [ -z "${{ secrets.CLOUDINARY_API_KEY }}" ]; then
            echo "CLOUDINARY_API_KEY không có giá trị, sử dụng giá trị mặc định"
            echo "CLOUDINARY_API_KEY=default_cloudinary_api_key" >> ./src/backend/.env
          else
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> ./src/backend/.env
          fi
      
          # Kiểm tra và ghi CLOUDINARY_API_SECRET
          if [ -z "${{ secrets.CLOUDINARY_API_SECRET }}" ]; then
            echo "CLOUDINARY_API_SECRET không có giá trị, sử dụng giá trị mặc định"
            echo "CLOUDINARY_API_SECRET=default_cloudinary_api_secret" >> ./src/backend/.env
          else
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> ./src/backend/.env
          fi
      
          # Kiểm tra và ghi CLOUDINARY_CLOUD_NAME
          if [ -z "${{ secrets.CLOUDINARY_CLOUD_NAME }}" ]; then
            echo "CLOUDINARY_CLOUD_NAME không có giá trị, sử dụng giá trị mặc định"
            echo "CLOUDINARY_CLOUD_NAME=default_cloudinary_cloud_name" >> ./src/backend/.env
          else
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> ./src/backend/.env
          fi

      # Cài đặt Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Thiết lập Docker Compose
      - name: Set up Docker Compose
        run: |
          cd src
          docker-compose up -d

      # Chờ ứng dụng sẵn sàng
      - name: Wait for app to be ready
        run: |
          n=0
          until [ $n -ge 24 ] || curl --silent --fail http://localhost:3000; do
            n=$((n+1))
            echo "Waiting for the app to start..."
            sleep 5
          done
          if [ $n -ge 24 ]; then
            echo "App failed to start in 120 seconds."
            exit 1
          fi

      # Chạy kiểm thử Cypress
      - name: Run Cypress tests
        run: |
          cd src/frontend
          npx cypress run

      # Dừng Docker containers
      - name: Shut down containers
        run: |
          cd src
          docker-compose down
