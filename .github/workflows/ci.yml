name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  deploy_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}", "branch": "main"}' \
            https://api.render.com/v1/deploys

  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: |
          npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes > result.txt
          echo "Vercel deployment URL is:"
          cat result.txt
          DEPLOY_URL=$(cat result.txt | grep -o 'https://[a-zA-Z0-9.-]*\.vercel\.app')
          echo "DEPLOY_URL=${DEPLOY_URL}" >> $GITHUB_ENV
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  test:
    needs: [deploy_backend, deploy_frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies for frontend
        working-directory: ./src/frontend
        run: |
          npm install

      - name: Run Jest tests for frontend
        working-directory: ./src/frontend
        run: |
          npm test -- --coverage

      - name: Install dependencies for backend
        working-directory: ./src/backend
        run: |
          npm install

      # - name: Run Jest tests for backend
      #   working-directory: ./src/backend
      #   run: |
      #     npm test -- --coverage

      - name: Install Cypress for frontend tests
        working-directory: ./src/frontend
        run: |
          npm install cypress

      - name: Start backend server
        working-directory: ./src/backend
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SIGN_UP_SECRET: ${{ secrets.SIGN_UP_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npm start &
          sleep 10

      - name: Start frontend server
        working-directory: ./src/frontend
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SIGN_UP_SECRET: ${{ secrets.SIGN_UP_SECRET }}
        run: |
          npm run build &&
          npm run start &
          sleep 60

      - name: Run Cypress tests for frontend
        working-directory: ./src/frontend
        env:
          CYPRESS_BASE_URL: ${{ env.DEPLOY_URL }}
        run: |
          npx cypress run --browser chrome
