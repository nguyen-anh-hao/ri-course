import { Body, ClassSerializerInterceptor, Controller, HttpCode, Patch, Post, Request, UseGuards, UseInterceptors } from "@nestjs/common";
import { AuthService } from "./auth.service";
import { SignInDto, SignUpDto, ChangePasswordDto } from "./dtos";
import { LocalAuthGuard, JwtAuthGuard, ChangePasswordGuard, SignUpGuard } from "./guards";
import { ApiBadRequestResponse, ApiBearerAuth, ApiBody, ApiCreatedResponse, ApiForbiddenResponse, ApiHeader, ApiNoContentResponse, ApiOkResponse, ApiOperation, ApiUnauthorizedResponse } from "@nestjs/swagger";
import { UserEntity } from "src/users/entities/user.entity";

@UseInterceptors(ClassSerializerInterceptor)
@Controller("auth")
export class AuthController {
    constructor(private authService: AuthService) {}

    @ApiOperation({
        summary: "Sign in a user"
    })
    @ApiBody({
        type: SignInDto
    })
    @ApiOkResponse({
        description: "OK: User signed in successfully",
        example: {
            access_token: "hihihithisisjustasampleaccesstoken"
        }
    })
    @ApiUnauthorizedResponse({
        description: "Unauthorized: Wrong credentials were entered",
    })
    @ApiBadRequestResponse({
        description: "Bad Request: Missing username or password"
    })
    @UseGuards(LocalAuthGuard)
    @HttpCode(200)
    @Post("signin")
    signin(@Request() req: { user: SignInDto }) {
        return this.authService.signin(req.user);
    }

    // -----------------------------------------------
    
    @ApiOperation({
        summary: "Sign up a user"
    })
    @ApiHeader({
        name: "Sign-Up-Token",
        description: "This token is automatically generated by an algorithm provided in the client",
        required: true
    })
    @ApiBody({
        type: SignUpDto,
    })
    @ApiCreatedResponse({
        description: "Created: User signed up successfully",
        type: UserEntity
    })
    @ApiForbiddenResponse({
        description: "Forbidden: Invalid Sign-Up-Token provided"
    })
    @ApiBadRequestResponse({
        description: "Bad Request: Username may have already been taken"
    })
    @UseGuards(SignUpGuard)
    @Post("signup")
    signup(@Body() body: SignUpDto) {
        return this.authService.signup(body);
    }
    
    // -----------------------------------------------
    
    @ApiBearerAuth()
    @ApiOperation({
        summary: "Change the password of an account"
    })
    @ApiBody({
        description: "The current user's username, old password and new password are required",
        type: ChangePasswordDto,
    })
    @ApiNoContentResponse({
        description: "The account's password changed successfully",
    })
    @ApiUnauthorizedResponse({
        description: "Wrong account's old password provided"
    })
    @ApiBadRequestResponse({
        description: "Old password or new password is missing"
    })
    @UseGuards(JwtAuthGuard, ChangePasswordGuard)
    @Patch("change-password")
    changePassword(@Request() req) {
        return this.authService.changePassword(+req.user.id, req.body);
    }
}
