from deepface import DeepFace
import cv2
import time
import os
from pathlib import Path
import pandas as pd
import json

model_name = "VGG-Face"  # Hoặc model khác phù hợp, thử nghiệm để tìm model tốt nhất
detector_backend = 'dlib'  # Hoặc backend khác
verification_threshold = 0.6  # Ngưỡng độ tin cậy, điều chỉnh theo nhu cầu

def capture_and_analyze(interval=10, num_frames=5, output_dir="report"):
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    cap = cv2.VideoCapture(0)
    frames_data = {}
    previous_frames = None  # Biến tạm thời để lưu frames của chu kỳ trước

    while True:
        start_time = time.time()
        cycle_key = time.strftime("%Y-%m-%d_%H-%M-%S", time.localtime(start_time))
        frames_data[cycle_key] = []

        for _ in range(num_frames):
            ret, frame = cap.read()
            if not ret:
                break

            current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

            try:
                results = DeepFace.find(img_path=frame, db_path="database",
                                        model_name=model_name,
                                        detector_backend=detector_backend,
                                        enforce_detection=False,  # Bỏ enforce_detection nếu cần thiết
                                        anti_spoofing=True) # Bật anti-spoofing

                if isinstance(results, pd.DataFrame) and not results.empty:
                    for i, result in results.iterrows():
                        liveness_result = result['antispoof']
                        liveness_score = liveness_result['score']
                        is_real = liveness_result['verified']
                        identity = result['identity'] if is_real else "Spoof"  # Lưu identity nếu real, "Spoof" nếu không
                        status = "Real" if is_real else "Spoof"

                        frame_path = os.path.join(output_dir, f"{cycle_key}_{i}_{status}.jpg")
                        cv2.imwrite(frame_path, frame)

                        frames_data[cycle_key].append({
                            "frame_path": frame_path,
                            "identity": identity,
                            "liveness_score": liveness_score,
                            "status": status
                        })

                        print(f"Time: {current_time}, Face: {i}, Identity: {identity}, Liveness: {status}, Score: {liveness_score}")
                # Nếu results là list, xử lý tương tự như trên.

            except Exception as e:
                print(f"Lỗi Deepface: {str(e)}")

            time.sleep(interval / num_frames)

        # So sánh với chu kỳ trước (hoặc biến tạm thời) và lưu report
        report_data = []
        if previous_frames:  # So sánh với previous_frames nếu có dữ liệu
            for current_frame_info in frames_data[cycle_key]:
                for prev_frame_info in previous_frames:
                    try:
                        verification = DeepFace.verify(img1_path=current_frame_info['frame_path'],
                                                       img2_path=prev_frame_info['frame_path'],
                                                       model_name=model_name,
                                                       detector_backend=detector_backend,
                                                       enforce_detection=False)

                        is_verified = verification['verified'] and verification['distance'] <= verification_threshold
                        report_data.append({
                            "current_frame": current_frame_info['frame_path'],
                            "previous_frame": prev_frame_info['frame_path'],
                            "is_verified": is_verified,
                            "distance": verification['distance']
                        })

                        print(f"Compare {current_frame_info['frame_path']} with {prev_frame_info['frame_path']}: Verified: {is_verified}, Distance: {verification['distance']}")

                    except Exception as e:
                        print(f"Lỗi khi so sánh khuôn mặt: {str(e)}")

        report_path = os.path.join(output_dir, f"report_{cycle_key}.json")
        with open(report_path, "w") as f:
            json.dump(report_data, f, indent=4)

        previous_frames = frames_data[cycle_key] # Cập nhật previous_frames

        print(f"Đã ghi lại {num_frames} frames và report. Chờ {interval} giây để tiếp tục...")
        time.sleep(max(0, interval - (time.time() - start_time)))

    cap.release()

capture_and_analyze()